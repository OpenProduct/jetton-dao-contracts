#include "imports/stdlib.func";
#include "imports/jetton-utils.func";
#include "imports/dao-utils.func";
#include "imports/error-codes.func";
#include "imports/op-codes.func";
#include "imports/params.func";
#include "imports/messages.func";


;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
const int provide_address_gas_consumption = 10000000;
const int provide_voting_data_gas_consumption = 20000000;


;; storage scheme
;; storage#_ total_supply:Coins voting_id:uint64 royalty_address:MsgAddress content:^Cell codes:^Cell
;;           = Storage;
;;
(int, int, int, int, cell, cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_uint(64), ;; voting_id
        ds~load_uint(8), ;; quorum_numerator
        ds~load_uint(8), ;; quorum_denominator
        ds~load_ref(), ;; royalty
        ds~load_ref(), ;; content
        ds~load_ref() ;; contract codes
    );
}

() save_data(int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) impure {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_uint(voting_id, 64)
        .store_uint(quorum_numerator, 8)
        .store_uint(quorum_denominator, 8)
        .store_ref(royalty)
        .store_ref(content)
        .store_ref(codes)
        .end_cell()
    );
}

;; Nft operations

() mint_nft_proposal(int query_id, slice author_address, slice in_msg_body) impure {
    int expiration_date = in_msg_body~load_uint(48); 
    cell proposal = in_msg_body~load_ref(); 

    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();
    (cell jetton_wallet_code, cell nft_proposal_code, cell vote_keeper_code) = unpack_codes(codes);

    throw_unless(error::voting_already_finished, now() < expiration_date);
    throw_unless(error::expiration_date_too_high, now() + max_voting_duration > expiration_date);

    cell state_init = calculate_dao_voting_state_init(my_address(), voting_id, nft_proposal_code);
    slice proposal_address = calc_address(state_init);

    save_data(total_supply, voting_id + 1, quorum_numerator, quorum_denominator, royalty, content, codes);

    var msg_body = begin_cell()
            .store_op(op::init_voting)
            .store_query_id(query_id)
            .store_uint(expiration_date, 48)
            .store_ref(jetton_wallet_code)
            .store_ref(vote_keeper_code)
            .store_ref(proposal)
            .store_ref(royalty)
            .store_slice(author_address)
            .end_cell();

    var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(proposal_address)
            .store_coins(0)
            .store_msgbody_prefix_stateinit(state_init, msg_body);

    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
}

() execute_proposal(int query_id, slice sender_address, slice in_msg_body) impure {
    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();
    (_, cell nft_proposal_code, cell vote_keeper_code) = unpack_codes(codes);

    (int voting_id, int expiration_date) = (in_msg_body~load_uint(64), in_msg_body~load_uint(48));

    slice voting_address = calculate_dao_voting_address(my_address(), voting_id, nft_proposal_code);

    throw_unless(error::unauthorized_vote_execution, equal_slice_bits(sender_address, voting_address));
    throw_unless(error::voting_not_finished, now() >= expiration_date);

    (int voted_for, int voted_against) = (in_msg_body~load_coins(), in_msg_body~load_coins());

    ;; custom logic, change voting acceptance here
    if((voted_for > voted_against) & (voted_for * quorum_denominator > total_supply * quorum_numerator)) {
        while (in_msg_body.slice_refs()) {
            send_raw_message(in_msg_body~load_ref(), PAY_FEES_SEPARATELY);
        }
    }
}

;; Jetton operations

() mint_jettons(int query_id, slice to_address, int jetton_amount, int forward_ton_amount, int total_ton_amount, cell codes) impure {
    throw_unless(error::discovery_fee_not_matched, total_ton_amount > forward_ton_amount);

    (cell jetton_wallet_code, _, cell vote_keeper_code) = unpack_codes(codes);

    cell mint_request = begin_cell()
            .store_op(op::internal_transfer)
            .store_query_id(query_id)
            .store_coins(jetton_amount) ;; max 124 bit
            .store_uint(0, 2) ;; from_address, addr_none$00
            .store_uint(0, 2) ;; response_address, 3 + 8 + 256 = 267 bit
            .store_coins(forward_ton_amount) ;; forward_amount, 4 bit if zero
            .store_uint(0, 1) ;; no forward_payload, 1 bit
            .end_cell();

    cell state_init = calculate_jetton_wallet_state_init(
        to_address,
        my_address(),
        jetton_wallet_code,
        vote_keeper_code
    );
    slice jetton_address = calc_address(state_init);

    var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(jetton_address)
            .store_coins(total_ton_amount)
            .store_msgbody_prefix_stateinit(state_init, mint_request);

    send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors
}

() mint_tokens(int query_id, slice in_msg_body) impure {
    slice to_address = in_msg_body~load_msg_addr();
    int jetton_amount = in_msg_body~load_coins();
    int forward_ton_amount = in_msg_body~load_coins();
    int total_ton_amount = in_msg_body~load_coins();

    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();
    mint_jettons(query_id, to_address, jetton_amount, forward_ton_amount, total_ton_amount, codes);
    save_data(total_supply + jetton_amount, voting_id, quorum_numerator, quorum_denominator, royalty, content, codes);
}

() burn_tokens(int query_id, slice sender_address, slice in_msg_body) impure {
    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();
    (cell jetton_wallet_code, _, cell vote_keeper_code) = unpack_codes(codes);

    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();

    throw_unless(error::unauthorized_burn_request,
            equal_slice_bits(calc_user_wallet(from_address, my_address(), jetton_wallet_code, vote_keeper_code), sender_address)
    );

    save_data(total_supply - jetton_amount, voting_id, quorum_numerator, quorum_denominator, royalty, content, codes);

    slice response_address = in_msg_body~load_msg_addr();
    if (response_address.preload_uint(2) != 0) {
        var msg = begin_cell()
                .store_msg_flag(msg_flag::non_bounceable)
                .store_slice(response_address)
                .store_coins(0)
                .store_msgbody_prefix_slice()
                .store_op(op::excesses)
                .store_query_id(query_id);
        send_raw_message(msg.end_cell(), IGNORE_ERRORS | CARRY_REMAINING_GAS);
    }
}

() send_wallet_address(int query_id, slice sender_address, slice in_msg_body) impure {
    (int total_supply, int voting_id, _, _, cell royalty, cell content, cell codes) = load_data();
    (cell jetton_wallet_code, _, cell vote_keeper_code) = unpack_codes(codes);

    slice owner_address = in_msg_body~load_msg_addr();
    int include_address? = in_msg_body~load_uint(1);

    cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
        .store_slice(sender_address)
        .store_coins(0)
        .store_msgbody_prefix_slice()
        .store_op(op::take_wallet_address)
        .store_query_id(query_id);

    if (is_resolvable?(owner_address)) {
        msg = msg.store_slice(calc_user_wallet(owner_address, my_address(), jetton_wallet_code, vote_keeper_code));
    } else {
        msg = msg.store_uint(0, 2); ;; addr_none
    }
    send_raw_message(msg.store_maybe_ref(included_address).end_cell(), CARRY_REMAINING_GAS);
}

;; Dao operations

() init_dao(int query_id, slice in_msg_body) impure {
    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();

    throw_if(error::unauthorized_mint_request, total_supply > 0);

    slice first_user = in_msg_body~load_msg_addr();
    int jetton_amount = in_msg_body~load_coins();

    int forward_ton_amount = in_msg_body~load_coins();
    int total_ton_amount = in_msg_body~load_coins();

    mint_jettons(query_id, first_user, jetton_amount, forward_ton_amount, total_ton_amount, codes);
    save_data(total_supply + jetton_amount, voting_id, quorum_numerator, quorum_denominator, royalty, content, codes);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_op();
    if ((op == op::excesses) | (op == op::ownership_assigned) | (op == op::transfer_notification) | (op == op::text)) {
        return ();
    }
    int query_id = in_msg_body~load_query_id();

    if (op == op::init_dao) { ;; allow for anyone
        return init_dao(query_id, in_msg_body);
    }
    if (op == op::schedule_proposal) { ;; allow for anyone
        return mint_nft_proposal(query_id, sender_address, in_msg_body);
    }
    if (op == op::provide_wallet_address) { ;; allow for anyone
        throw_unless(error::discovery_fee_not_matched, msg_value > fwd_fee + provide_address_gas_consumption);
        return send_wallet_address(query_id, sender_address, in_msg_body);
    }
    if (op == op::burn_notification) { ;; allow for jettons
        return burn_tokens(query_id, sender_address, in_msg_body);
    }
    if (op == op::execute_vote_result) { ;; allow for nft proposals
        return execute_proposal(query_id, sender_address, in_msg_body);
    }

    throw_unless(error::unauthorized_transfer, equal_slice_bits(sender_address, my_address()));
    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();

    if (op == op::mint) {
        return mint_tokens(query_id, in_msg_body);
    }
    if (op == op::change_content) {
        return save_data(total_supply, voting_id, quorum_numerator, quorum_denominator, royalty, in_msg_body~load_ref(), codes);
    }
    if (op == op::change_quorum) {
        return save_data(total_supply, voting_id, in_msg_body~load_uint(8), in_msg_body~load_uint(8), royalty, content, codes);
    }

    throw(error::unknown_op);
}

;; Jetton minter get methods

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, int voting_id, _, _, cell royalty, cell content, cell codes) = load_data();
    (cell jetton_wallet_code, _, _) = unpack_codes(codes);
    return (total_supply, -1, my_address(), content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, int voting_id, _, _, cell royalty, cell content, cell codes) = load_data();
    (cell jetton_wallet_code, _, cell vote_keeper_code) = unpack_codes(codes);
    return calc_user_wallet(owner_address, my_address(), jetton_wallet_code, vote_keeper_code);
}


;; Nft colection methods

(int, cell, slice) get_collection_data() method_id {
    (int total_supply, int voting_id, _, _, cell royalty, cell content, cell codes) = load_data();
    return (voting_id, content, my_address());
}

slice get_nft_address_by_index(int index) method_id {
    (int total_supply, int voting_id, _, _, cell royalty, cell content, cell codes) = load_data();
    (_, cell nft_proposal_code, _) = unpack_codes(codes);
    return calculate_dao_voting_address(my_address(), index, nft_proposal_code);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    return individual_nft_content;
}

(int, int, slice) royalty_params() method_id {
    (int total_supply, int voting_id, _, _, cell royalty, cell content, cell codes) = load_data();
    slice sl = royalty.begin_parse();
    return (sl~load_uint(16), sl~load_uint(16), sl~load_msg_addr());
}

;; Dao methods

(int, int, int, int, cell) dao_params() method_id {
    (int total_supply, int voting_id, int quorum_numerator, int quorum_denominator, cell royalty, cell content, cell codes) = load_data();
    slice sl = royalty.begin_parse();
    return (total_supply, voting_id, quorum_numerator, quorum_denominator, content);
}
