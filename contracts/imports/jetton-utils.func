#include "params.func";
#include "nft-utils.func";

(cell, cell, cell) unpack_codes(cell codes) inline {
    slice ds = codes.begin_parse();
    cell jetton_wallet_code = ds~load_ref();
    cell nft_proposal_code = ds~load_ref();
    cell vote_keeper_code = ds~load_ref();
    ds.end_parse();
    return (jetton_wallet_code, nft_proposal_code, vote_keeper_code);
}

cell pack_jetton_wallet_data(int balance, slice owner,
                              slice jetton_master, cell jetton_wallet_code,
                              int locked, int locked_expiration,
                              cell vote_keeper_code) inline {
    return begin_cell()
        .store_coins(balance)
        .store_slice(owner)
        .store_slice(jetton_master)
        .store_ref(jetton_wallet_code)
        .store_coins(locked)
        .store_uint(locked_expiration, 48)
        .store_ref(vote_keeper_code)
        .end_cell();
}
{-
    _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
      code:(Maybe ^Cell) data:(Maybe ^Cell)
      library:(HashmapE 256 SimpleLib) = StateInit;
-}
cell calculate_jetton_wallet_state_init(slice owner, slice jetton_master, cell jetton_wallet_code, cell vote_keeper_code) inline {
    return begin_cell()
        .store_uint(0,1 + 1) ;; split_depth (Maybe = 0) and special (Maybe = 0)
        .store_maybe_ref(jetton_wallet_code)
        .store_maybe_ref(pack_jetton_wallet_data(0, owner, jetton_master, jetton_wallet_code, 0, 0, vote_keeper_code))
        .store_uint(0,1) ;; libraries - empty cell
        .end_cell();
}


(slice) calc_user_wallet(slice owner, slice jetton_master, cell jetton_wallet_code, cell vote_keeper_code) inline {
    return calc_address(calculate_jetton_wallet_state_init(owner, jetton_master, jetton_wallet_code, vote_keeper_code));
}

